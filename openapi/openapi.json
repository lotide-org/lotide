{
	"openapi": "3.0.1",
	"info": {
		"title": "lotide API",
		"version": "dev"
	},
	"components": {
		"schemas": {
			"PathUserID": {
				"oneOf": [
					{"type": "string", "enum": ["~me"]},
					{"type": "integer"}
				]
			},
			"SortType": {
				"type": "string",
				"enum": ["hot", "new"]
			},
			"Content": {
				"type": "object",
				"required": ["content_text", "content_markdown", "content_html"],
				"properties": {
					"content_text": {"type": "string"},
					"content_markdown": {"type": "string"},
					"content_html": {"type": "string"}
				}
			},
			"LoginUserInfo": {
				"type": "object",
				"required": ["id", "username", "is_site_admin", "has_unread_notifications", "has_pending_moderation_actions"],
				"properties": {
					"id": {"type": "integer"},
					"username": {"type": "string"},
					"is_site_admin": {"type": "boolean"},
					"has_unread_notifications": {"type": "boolean"},
					"has_pending_moderation_actions": {"type": "boolean"}
				}
			},
			"LoginInfo": {
				"type": "object",
				"required": ["user", "permissions"],
				"properties": {
					"user": {
						"$ref": "#/components/schemas/LoginUserInfo"
					},
					"permissions": {
						"type": "object",
						"required": ["create_community", "create_invitation"],
						"properties": {
							"create_community": {"$ref": "#/components/schemas/PermissionInfo"},
							"create_invitation": {"$ref": "#/components/schemas/PermissionInfo"}
						}
					}
				}
			},
			"MinimalCommentInfo": {
				"type": "object",
				"required": ["id", "remote_url"],
				"properties": {
					"id": {"type": "integer"},
					"remote_url": {"type": "string", "nullable": true},
					"content_text": {"type": "string"},
					"content_html": {"type": "string"}
				}
			},
			"MinimalCommunityInfo": {
				"type": "object",
				"required": ["id", "username", "local", "host", "remote_url", "deleted"],
				"properties": {
					"id": {"type": "integer"},
					"name": {"type": "string"},
					"local": {"type": "boolean"},
					"host": {"type": "string"},
					"remote_url": {"type": "string", "nullable": true},
					"deleted": {"type": "boolean"}
				}
			},
			"MinimalPostInfo": {
				"type": "object",
				"required": ["id", "title", "remote_url", "sensitive"],
				"properties": {
					"id": {"type": "integer"},
					"title": {"type": "string"},
					"remote_url": {"type": "string", "nullable": true},
					"sensitive": {"type": "boolean"}
				}
			},
			"NullableMinimalPostInfo": {
				"type": "object",
				"nullable": true,
				"required": ["id", "title", "remote_url"],
				"properties": {
					"id": {"type": "integer"},
					"title": {"type": "string"},
					"remote_url": {"type": "string", "nullable": true},
					"sensitive": {"type": "boolean"}
				}
			},
			"MinimalUserInfo": {
				"type": "object",
				"required": ["id", "username", "local", "host", "remote_url", "is_bot"],
				"properties": {
					"id": {"type": "integer"},
					"username": {"type": "string"},
					"local": {"type": "boolean"},
					"host": {"type": "string"},
					"remote_url": {"type": "string", "nullable": true},
					"is_bot": {"type": "boolean"},
					"avatar": {
						"type": "object",
						"required": ["url"],
						"properties": {
							"url": {"type": "string"}
						}
					}
				}
			},
			"NullableMinimalUserInfo": {
				"type": "object",
				"nullable": true,
				"required": ["id", "username", "local", "host", "remote_url"],
				"properties": {
					"id": {"type": "integer"},
					"username": {"type": "string"},
					"local": {"type": "boolean"},
					"host": {"type": "string"},
					"remote_url": {"type": "string", "nullable": true},
					"avatar": {
						"type": "object",
						"required": ["url"],
						"properties": {
							"url": {"type": "string"}
						}
					}
				}
			},
			"UserInfo": {
				"allOf": [{"$ref": "#/components/schemas/MinimalUserInfo"}],
				"type": "object",
				"required": ["description"],
				"properties": {
					"description": {
						"$ref": "#/components/schemas/Content"
					},
					"your_note": {
						"type": "string",
						"nullable": true,
						"description": "Private note about this user written by you"
					},
					"suspended": {
						"type": "boolean",
						"description": "Whether the user is suspended"
					}
				}
			},
			"CommunityInfo": {
				"allOf": [{"$ref": "#/components/schemas/MinimalCommunityInfo"}],
				"type": "object",
				"required": ["description", "feeds"],
				"properties": {
					"description": {
						"$ref": "#/components/schemas/Content"
					},
					"feeds": {
						"type": "object",
						"required": ["atom"],
						"properties": {
							"atom": {
								"type": "object",
								"required": ["new"],
								"properties": {
									"new": {
										"type": "string"
									}
								}
							}
						}
					},
					"you_are_moderator": {"type": "boolean"},
					"your_follow": {
						"type": "object",
						"nullable": true,
						"required": ["accepted"],
						"properties": {
							"accepted": {
								"type": "boolean",
								"description": "Whether your follow request has been accepted by the community."
							}
						}
					},
					"pending_moderation_actions": {
						"type": "integer",
						"description": "Number of pending flags sent to this community. Present with include_your=true if you are a moderator"
					}
				}
			},
			"PermissionInfo": {
				"type": "object",
				"required": ["allowed"],
				"properties": {
					"allowed": {"type": "boolean"}
				}
			},
			"SomePostInfo": {
				"type": "object",
				"required": ["id", "title", "created", "community", "score", "sticky", "remote_url", "content_text", "content_html", "content_markdown", "sensitive"],
				"properties": {
					"id": {"type": "integer"},
					"title": {"type": "string"},
					"remote_url": {"type": "string", "nullable": true},
					"href": {"type": "string"},
					"content_text": {
						"nullable": true,
						"type": "string",
						"description": "Content in text form. Should be displayed if content_html is not present."
					},
					"content_html": {
						"nullable": true,
						"type": "string",
						"description": "Content in HTML form."
					},
					"author": {
						"$ref": "#/components/schemas/MinimalUserInfo"
					},
					"created": {"type": "string", "format": "date-time"},
					"community": {
						"type": "object",
						"required": ["id", "name", "local", "host", "remote_url"],
						"properties": {
							"id": {"type": "integer"},
							"name": {"type": "string"},
							"local": {"type": "boolean"},
							"host": {"type": "string"},
							"remote_url": {"type": "string", "nullable": true}
						}
					},
					"score": {"type": "integer"},
					"sticky": {"type": "boolean"},
					"your_vote": {"$ref": "#/components/schemas/YourVote"},
					"content_markdown": {"type": "string", "nullable": true},
					"sensitive": {"type": "boolean"}
				}
			},
			"PostListPost": {
				"allOf": [
					{"$ref": "#/components/schemas/SomePostInfo"},
					{
						"type": "object",
						"required": ["replies_count_total"],
						"properties": {
							"replies_count_total": {"type": "integer"}
						}
					}
				]
			},
			"PostCommentInfo": {
				"type": "object",
				"required": ["id", "content_text", "content_markdown", "content_html", "sensitive", "author", "created", "deleted", "replies", "attachments", "local", "remote_url"],
				"properties": {
					"id": {"type": "integer"},
					"remote_url": {"type": "string", "nullable": true},
					"content_text": {"type": "string", "nullable": true},
					"content_markdown": {"type": "string", "nullable": true},
					"content_html": {"type": "string", "nullable": true},
					"sensitive": {"type": "boolean"},
					"attachments": {
						"type": "array",
						"items": {
							"type": "object",
							"required": ["url"],
							"properties": {
								"url": {"type": "string"}
							}
						}
					},
					"author": {
						"$ref": "#/components/schemas/NullableMinimalUserInfo"
					},
					"created": {"type": "string", "format": "date-time"},
					"deleted": {"type": "boolean"},
					"local": {"type": "boolean"},
					"replies": {
						"type": "object",
						"nullable": true,
						"required": ["items", "next_page"],
						"properties": {
							"items": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/PostCommentInfo"}
							},
							"next_page": {
								"type": "string",
								"nullable": true
							}
						},
						"description": "If null, there are replies to this comment but are omitted due to depth limits. Otherwise, this contains a list of replies. If next_page is not null, some replies have been omitted and can be accessed with pagination."
					},
					"your_vote": {"$ref": "#/components/schemas/YourVote"}
				}
			},
			"YourVote": {
				"type": "object",
				"nullable": true,
				"description": "Will be null if you haven't voted, or an empty object if you have."
			}
		},
		"securitySchemes": {
			"bearer": {
				"type": "http",
				"description": "Token passed in Authorization header as Bearer",
				"scheme": "bearer"
			}
		}
	},
	"paths": {
		"/api/unstable/actors:lookup/{remoteID}": {
			"get": {
				"summary": "Look up a remote actor by WebFinger or ActivityPub ID",
				"parameters": [
					{
						"name": "remoteID",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "object",
										"required": ["id"],
										"properties": {
											"id": {"type": "integer"},
											"type": {"type": "string", "enum": ["community", "user"]}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/comments/{commentID}": {
			"get": {
				"summary": "Fetch a comment",
				"parameters": [
					{
						"name": "commentID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					},
					{
						"name": "include_your",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["id", "content_text", "content_html", "sensitive", "author", "created", "deleted", "replies", "parent", "post", "remote_url"],
									"properties": {
										"id": {"type": "integer"},
										"remote_url": {"type": "string", "nullable": true},
										"content_text": {"type": "string", "nullable": true},
										"content_html": {"type": "string", "nullable": true},
										"sensitive": {"type": "boolean"},
										"author": {
											"$ref": "#/components/schemas/NullableMinimalUserInfo"
										},
										"created": {"type": "string", "format": "date-time"},
										"deleted": {"type": "boolean"},
										"replies": {
											"type": "object",
											"nullable": true,
											"properties": {
												"items": {"type": "array"},
												"next_page": {
													"type": "string",
													"nullable": true,
													"description": "This is actually always null since it only appears when there are no replies."
												}
											},
											"description": "This endpoint no longer includes replies. However, if there are no replies, this will be non-null and items will be an empty array."
										},
										"your_vote": {"$ref": "#/components/schemas/YourVote"},
										"parent": {
											"type": "object",
											"nullable": true,
											"required": ["id"],
											"properties": {
												"id": {"type": "integer"}
											}
										},
										"post": {"$ref": "#/components/schemas/NullableMinimalPostInfo"}
									}
								}
							}
						}
					}
				},
				"security": [{"bearer": []}]
			},
			"delete": {
				"summary": "Delete a comment",
				"parameters": [
					{
						"name": "commentID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"responses": {
					"204": {
						"description": "Successfully deleted."
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/comments/{commentID}/replies": {
			"get": {
				"summary": "List comment replies",
				"parameters": [
					{
						"name": "commentID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					},
					{
						"name": "include_your",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"}
					},
					{
						"name": "depth",
						"in": "query",
						"required": false,
						"schema": {"type": "integer"},
						"description": "Number of levels to expand replies for. Defaults to 3."
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {"type": "integer"}
					},
					{
						"name": "sort",
						"in": "query",
						"required": false,
						"schema": {"$ref": "#/components/schemas/SortType"}
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"schema": {"type": "string"}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["items", "next_page"],
									"properties": {
										"items": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/PostCommentInfo"
											}
										},
										"next_page": {
											"type": "string",
											"nullable": true
										}
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Reply to a comment",
				"parameters": [
					{
						"name": "commentID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"content_text": {"type": "string"},
									"content_markdown": {"type": "string"},
									"attachment": {
										"type": "string",
										"description": "Must be a `local-media://` reference"
									},
									"sensitive": {"type": "boolean"}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successfully created reply.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["id", "post"],
									"properties": {
										"id": {"type": "integer"},
										"post": {
											"type": "object",
											"required": ["id"],
											"properties": {
												"id": {"type": "integer"}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/comments/{commentID}/votes": {
			"get": {
				"summary": "List likers of a comment",
				"parameters": [
					{
						"name": "commentID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					},
					{
						"name": "page",
						"in": "query",
						"required": true,
						"schema": {"type": "string"}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["items", "next_page"],
									"properties": {
										"items": {
											"type": "array",
											"items": {
												"type": "object",
												"required": ["user"],
												"properties": {
													"user": {"$ref": "#/components/schemas/MinimalUserInfo"}
												}
											}
										},
										"next_page": {
											"type": "string",
											"nullable": true
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/comments/{commentID}/your_vote": {
			"put": {
				"summary": "Like a comment",
				"parameters": [
					{
						"name": "commentID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"responses": {
					"204": {
						"description": "Successfully liked."
					}
				},
				"security": [{"bearer": []}]
			},
			"delete": {
				"summary": "Retract a like of a comment",
				"parameters": [
					{
						"name": "commentID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"responses": {
					"204": {
						"description": "Successfully unliked."
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/communities": {
			"get": {
				"summary": "List communities",
				"parameters": [
					{
						"name": "include_your",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"},
						"description": "If true, will include `you_are_moderator` and `your_follow` in list. Requires login."
					},
					{
						"name": "search",
						"in": "query",
						"required": false,
						"schema": {"type": "string"}
					},
					{
						"name": "your_follow.accepted",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"},
						"description": "Filter to either communities you are following or waiting to follow. Requires login."
					},
					{
						"name": "you_are_moderator",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"},
						"description": "Filter based on whether you are a moderator of the community. Requires login."
					},
					{
						"name": "local",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"},
						"description": "Filter to either local or remote communities."
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {"type": "integer"}
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"schema": {"type": "string"}
					},
					{
						"name": "sort",
						"in": "query",
						"required": false,
						"schema": {"type": "string", "enum": ["old_local", "alphabetic"]}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["items", "next_page"],
									"properties": {
										"items": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/CommunityInfo"
											}
										},
										"next_page": {
											"type": "string",
											"nullable": true
										}
									}
								}
							}
						}
					}
				},
				"security": [{"bearer": []}]
			},
			"post": {
				"summary": "Create a community",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["name"],
								"properties": {
									"name": {"type": "string"}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successfully created.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["community"],
									"properties": {
										"community": {
											"type": "object",
											"required": ["id"],
											"properties": {
												"id": {"type": "integer"}
											}
										}
									}
								}
							}
						}
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/communities/{communityID}": {
			"get": {
				"summary": "Fetch community info",
				"parameters": [
					{
						"name": "communityID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					},
					{
						"name": "include_your",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CommunityInfo"
								}
							}
						}
					}
				},
				"security": [{"bearer": []}]
			},
			"patch": {
				"summary": "Edit community details",
				"parameters": [
					{
						"name": "communityID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"description_text": {"type": "string"},
									"description_markdown": {"type": "string"},
									"description_html": {"type": "string"}
								}
							}
						}
					}
				},
				"responses": {
					"204": {"description": "Successfully modified."}
				},
				"security": [{"bearer": []}]
			},
			"delete": {
				"summary": "Delete a community",
				"parameters": [
					{
						"name": "communityID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"responses": {
					"204": {"description": "Successfully deleted."}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/communities/{communityID}/follow": {
			"post": {
				"summary": "Follow a community",
				"parameters": [
					{
						"name": "communityID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"try_wait_for_accept": {
										"type": "boolean",
										"description": "If true, will wait before responding to give the remote server time to accept the follow"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successfully sent follow request.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["accepted"],
									"properties": {
										"accepted": {"type": "boolean"}
									}
								}
							}
						}
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/communities/{communityID}/moderators": {
			"get": {
				"summary": "List moderators of a community",
				"parameters": [
					{
						"name": "communityID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/MinimalUserInfo"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/communities/{communityID}/moderators/{userID}": {
			"put": {
				"summary": "Add a moderator to a community",
				"parameters": [
					{
						"name": "communityID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					},
					{
						"name": "userID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"responses": {
					"204": {
						"description": "Successfully added."
					}
				},
				"security": [{"bearer": []}]
			},
			"delete": {
				"summary": "Remove a moderator from a community",
				"parameters": [
					{
						"name": "communityID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					},
					{
						"name": "userID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"responses": {
					"204": {
						"description": "Successfully removed."
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/communities/{communityID}/modlog/events": {
			"get": {
				"summary": "List community modlog events",
				"parameters": [
					{
						"name": "communityID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {"type": "integer"}
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"schema": {"type": "string"}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["items", "next_page"],
									"properties": {
										"items": {
											"type": "array",
											"items": {
												"allOf": [
													{
														"type": "object",
														"required": ["time"],
														"properties": {
															"time": {"type": "string", "format": "date-time"}
														}
													},
													{
														"oneOf": [
															{
																"type": "object",
																"required": ["type", "post"],
																"properties": {
																	"type": {"type": "string", "enum": ["reject_post"]},
																	"post": {"$ref": "#/components/schemas/MinimalPostInfo"}
																}
															},
															{
																"type": "object",
																"required": ["type", "post"],
																"properties": {
																	"type": {"type": "string", "enum": ["approve_post"]},
																	"post": {"$ref": "#/components/schemas/MinimalPostInfo"}
																}
															}
														]
													}
												]
											}
										},
										"next_page": {"type": "string", "nullable": true}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/communities/{communityID}/posts/{postID}": {
			"patch": {
				"summary": "Modify a post's publishing state",
				"parameters": [
					{
						"name": "communityID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					},
					{
						"name": "postID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"approved": {"type": "boolean"},
									"sticky": {"type": "boolean"}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "Successfully modified."
					}
				}
			}
		},
		"/api/unstable/communities/{communityID}/unfollow": {
			"post": {
				"summary": "Unfollow a community",
				"parameters": [
					{
						"name": "communityID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"responses": {
					"202": {
						"description": "Successfully unfollowed."
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/flags": {
			"get": {
				"summary": "List flags",
				"parameters": [
					{
						"name": "to_community",
						"in": "query",
						"required": false,
						"schema": {"type": "integer"}
					},
					{
						"name": "to_this_site_admin",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"}
					},
					{
						"name": "dismissed",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"},
						"description": "Filter by whether the flag is dismissed for the target. Requires exactly one target filter."
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["items", "next_page"],
									"properties": {
										"items": {
											"type": "array",
											"items": {
												"allOf": [
													{
														"type": "object",
														"required": ["id", "flagger", "created_local", "content"],
														"properties": {
															"id": {"type": "integer"},
															"flagger": {"$ref": "#/components/schemas/MinimalUserInfo"},
															"created_local": {"type": "string", "format": "date-time"},
															"content": {
																"nullable": true,
																"required": ["content_text"],
																"properties": {
																	"content_text": {"type": "string"}
																}
															}
														}
													},
													{
														"oneOf": [
															{
																"type": "object",
																"required": ["type", "post"],
																"properties": {
																	"type": {"type": "string", "enum": ["post"]},
																	"post": {"$ref": "#/components/schemas/PostListPost"}
																}
															}
														]
													}
												]
											}
										},
										"next_page": {"type": "string", "nullable": true}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/flags/{flagID}": {
			"patch": {
				"summary": "Edit flag details",
				"parameters": [
					{
						"name": "flagID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"community_dismissed": {"type": "boolean"}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "Successfully modified."
					}
				}
			}
		},
		"/api/unstable/forgot_password/keys": {
			"post": {
				"summary": "Request a password reset",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["email_address"],
								"properties": {
									"email_address": {"type": "string", "format": "email"}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successfully requested."
					}
				}
			}
		},
		"/api/unstable/forgot_password/keys/{key}": {
			"get": {
				"summary": "Check validity of a password reset key",
				"parameters": [
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {"type": "string"}
					}
				],
				"responses": {
					"200": {
						"description": "Key is valid."
					},
					"404": {
						"description": "No such key, or is expired."
					}
				}
			}
		},
		"/api/unstable/forgot_password/keys/{key}/reset": {
			"post": {
				"summary": "Reset a password using a password reset key",
				"parameters": [
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {"type": "string"}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["new_password"],
								"properties": {
									"new_password": {"type": "string", "format": "password"}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successfully reset."
					}
				}
			}
		},
		"/api/unstable/instance": {
			"get": {
				"summary": "Fetch information about the instance",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["software", "description", "web_push_vapid_key", "signup_allowed", "invitations_enabled", "community_creation_requirement", "invitation_creation_requirement"],
									"properties": {
										"software": {
											"type": "object",
											"required": ["name", "version"],
											"properties": {
												"name": {"type": "string", "example": "lotide"},
												"version": {"type": "string", "example": "0.5.0-pre"}
											}
										},
										"description": {
											"$ref": "#/components/schemas/Content"
										},
										"web_push_vapid_key": {
											"type": "string"
										},
										"signup_allowed": {
											"type": "boolean"
										},
										"invitations_enabled": {
											"type": "boolean"
										},
										"community_creation_requirement": {
											"nullable": true,
											"type": "string",
											"enum": ["site_admin"]
										},
										"invitation_creation_requirement": {
											"nullable": true,
											"type": "string",
											"enum": ["site_admin"]
										}
									}
								}
							}
						}
					}
				}
			},
			"patch": {
				"summary": "Modify instance settings",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"description_text": {"type": "string"},
									"description_markdown": {"type": "string"},
									"description_html": {"type": "string"},
									"signup_allowed": {"type": "boolean"},
									"invitations_enabled": {"type": "boolean"},
									"community_creation_requirement": {
										"nullable": true,
										"type": "string",
										"enum": ["site_admin"]
									},
									"invitation_creation_requirement": {
										"nullable": true,
										"type": "string",
										"enum": ["site_admin"]
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "Successfully modified."
					}
				}
			}
		},
		"/api/unstable/instance/modlog/events": {
			"get": {
				"summary": "List instance modlog events",
				"parameters": [
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {"type": "integer"}
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"schema": {"type": "string"}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["items", "next_page"],
									"properties": {
										"items": {
											"type": "array",
											"items": {
												"allOf": [
													{
														"type": "object",
														"required": ["time"],
														"properties": {
															"time": {"type": "string", "format": "date-time"}
														}
													},
													{
														"type": "object",
														"required": ["type", "author", "community"],
														"properties": {
															"type": {
																"type": "string",
																"enum": ["delete_post"]
															},
															"author": {
																"$ref": "#/components/schemas/MinimalUserInfo"
															},
															"community": {
																"$ref": "#/components/schemas/MinimalCommunityInfo"
															}
														}
													},
													{
														"type": "object",
														"required": ["type", "author", "post"],
														"properties": {
															"type": {
																"type": "string",
																"enum": ["delete_comment"]
															},
															"author": {
																"$ref": "#/components/schemas/MinimalUserInfo"
															},
															"post": {
																"$ref": "#/components/schemas/MinimalPostInfo"
															}
														}
													},
													{
														"type": "object",
														"required": ["type", "user"],
														"properties": {
															"type": {
																"type": "string",
																"enum": ["suspend_user"]
															},
															"user": {
																"$ref": "#/components/schemas/MinimalUserInfo"
															}
														}
													},
													{
														"type": "object",
														"required": ["type", "user"],
														"properties": {
															"type": {
																"type": "string",
																"enum": ["unsuspend_user"]
															},
															"user": {
																"$ref": "#/components/schemas/MinimalUserInfo"
															}
														}
													}
												]
											}
										},
										"next_page": {"type": "string", "nullable": true}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/invitations": {
			"get": {
				"summary": "Lookup invitations",
				"parameters": [
					{
						"name": "key",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["items", "next_page"],
									"properties": {
										"items": {
											"type": "array",
											"items": {
												"type": "object",
												"required": ["id", "key", "created_by", "created_at", "used"],
												"properties": {
													"id": {"type": "integer"},
													"key": {"type": "string"},
													"created_by": {"$ref": "#/components/schemas/MinimalUserInfo"},
													"created_at": {"type": "string", "format": "date-time"},
													"used": {"type": "boolean"}
												}
											}
										},
										"next_page": {"type": "string", "nullable": true}
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Create an invitation",
				"responses": {
					"200": {
						"description": "Successfully created.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["key", "id"],
									"properties": {
										"key": {"type": "string"},
										"id": {"type": "integer"}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/logins": {
			"post": {
				"summary": "Log in to the service",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["username", "password"],
								"properties": {
									"username": {
										"type": "string"
									},
									"password": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successfully logged in.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"type": "object",
											"required": ["token"],
											"properties": {
												"token": {"type": "string"}
											}
										},
										{
											"$ref": "#/components/schemas/LoginInfo"
										}
									]
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/logins/~current": {
			"get": {
				"summary": "Fetch current login state",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginInfo"
								}
							}
						}
					}
				},
				"security": [{"bearer": []}]
			},
			"delete": {
				"summary": "Log out",
				"description": "Invalidates the current login session.",
				"responses": {
					"204": {
						"description": "Successfully ended."
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/media": {
			"post": {
				"summary": "Upload an image",
				"description": "Uploads an image as hosted media. File content must be sent as the request body.",
				"responses": {
					"200": {
						"description": "Successfully uploaded.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["id"],
									"properties": {
										"id": {"type": "string"}
									}
								}
							}
						}
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/misc/render_markdown": {
			"post": {
				"summary": "Preview Markdown rendering",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["content_markdown"],
								"properties": {
									"content_markdown": {"type": "string"}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["content_html"],
									"properties": {
										"content_html": {"type": "string"}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/posts": {
			"get": {
				"summary": "List posts",
				"parameters": [
					{
						"name": "include_your",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"}
					},
					{
						"name": "sort",
						"in": "query",
						"required": false,
						"schema": {
							"oneOf": [
								{"$ref": "#/components/schemas/SortType"},
								{"type": "string", "enum": ["relevant"]}
							]
						}
					},
					{
						"name": "search",
						"in": "query",
						"required": false,
						"schema": {"type": "string"}
					},
					{
						"name": "in_any_local_community",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"},
						"description": "Filter by whether the post is approved in a local community"
					},
					{
						"name": "use_aggregate_filters",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"},
						"description": "If true, will omit posts from communities marked as hide_posts_from_aggregates"
					},
					{
						"name": "community",
						"in": "query",
						"required": false,
						"schema": {"type": "integer"},
						"description": "If present, will filter to posts approved in the specified community"
					},
					{
						"name": "in_your_follows",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"},
						"description": "Filter by whether the post is approved in one of the communities you follow"
					},
					{
						"name": "created_within",
						"in": "query",
						"required": false,
						"schema": {"type": "string"},
						"example": "P6M",
						"description": "How far into the past to include posts from, as an ISO8601 duration."
					},
					{
						"name": "sort_sticky",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"},
						"description": "If true, will sort sticky posts to the top"
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {"type": "integer"}
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"schema": {"type": "string"}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["items", "next_page"],
									"properties": {
										"items": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/PostListPost"
											}
										},
										"next_page": {
											"type": "string",
											"nullable": true
										}
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Create a new post",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["community", "title"],
								"properties": {
									"community": {"type": "integer"},
									"href": {
										"type": "string",
										"description": "URL target for the post. Can be set to a hosted media file by specifying `local-media://<id>`"
									},
									"content_markdown": {"type": "string"},
									"content_text": {"type": "string"},
									"title": {"type": "string"},
									"poll": {
										"type": "object",
										"required": ["multiple", "options", "closed_in"],
										"properties": {
											"multiple": {"type": "boolean", "description": "Whether voters can choose multiple options"},
											"options": {
												"type": "array",
												"items": {"type": "string"},
												"description": "The available options in the poll"
											},
											"closed_in": {
												"type": "string",
												"example": "PT10M",
												"description": "How long until the poll should close, as an ISO8601 duration."
											}
										}
									},
									"sensitive": {"type": "boolean"}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successfully created.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["id"],
									"properties": {
										"id": {"type": "integer"}
									}
								}
							}
						}
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/posts/{postID}": {
			"get": {
				"summary": "Fetch a post",
				"parameters": [
					{
						"name": "postID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					},
					{
						"name": "include_your",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [{"$ref": "#/components/schemas/SomePostInfo"}],
									"type": "object",
									"required": ["approved", "local", "rejected", "poll"],
									"properties": {
										"approved": {"type": "boolean"},
										"local": {"type": "boolean"},
										"rejected": {"type": "boolean"},
										"poll": {
											"nullable": true,
											"type": "object",
											"required": ["multiple", "options", "closed_at", "is_closed"],
											"properties": {
												"multiple": {"type": "boolean", "description": "Whether voters can choose multiple options"},
												"options": {
													"type": "array",
													"items": {
														"type": "object",
														"required": ["id", "name", "votes"],
														"properties": {
															"id": {"type": "integer"},
															"name": {"type": "string"},
															"votes": {"type": "integer"}
														}
													}
												},
												"closed_at": {
													"nullable": true,
													"type": "string",
													"format": "date-time",
													"description": "The time when this poll has or will close."
												},
												"is_closed": {
													"type": "boolean"
												},
												"your_vote": {
													"nullable": true,
													"type": "object",
													"required": ["options"],
													"properties": {
														"options": {
															"type": "array",
															"items": {
																"type": "object",
																"required": ["id"],
																"properties": {
																	"id": {"type": "integer"}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"security": [{"bearer": []}]
			},
			"delete": {
				"summary": "Delete a post",
				"parameters": [
					{
						"name": "postID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"responses": {
					"204": {
						"description": "Successfully deleted."
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/posts/{postID}/flags": {
			"post": {
				"summary": "Flag a post",
				"parameters": [
					{
						"name": "postID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["to_community", "to_site_admin"],
								"properties": {
									"content_text": {"type": "string"},
									"to_community": {"type": "boolean"},
									"to_site_admin": {"type": "boolean"},
									"to_remote_site_admin": {"type": "boolean"}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successfully flagged.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/posts/{postID}/poll/your_vote": {
			"put": {
				"summary": "Vote in a poll",
				"parameters": [
					{
						"name": "postID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"oneOf": [
									{
										"type": "object",
										"required": ["options"],
										"properties": {
											"options": {"type": "array", "items": {"type": "integer"}}
										}
									},
									{
										"type": "object",
										"required": ["option"],
										"properties": {
											"option": {"type": "integer"}
										}
									}
								]
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "Successfully voted."
					}
				}
			}
		},
		"/api/unstable/posts/{postID}/replies": {
			"get": {
				"summary": "List post replies",
				"parameters": [
					{
						"name": "postID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					},
					{
						"name": "include_your",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"}
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {"type": "integer"}
					},
					{
						"name": "sort",
						"in": "query",
						"required": false,
						"schema": {"$ref": "#/components/schemas/SortType"}
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"schema": {"type": "string"}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["items", "next_page"],
									"properties": {
										"items": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/PostCommentInfo"
											}
										},
										"next_page": {
											"type": "string",
											"nullable": true
										}
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Reply to a post",
				"parameters": [
					{
						"name": "postID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"content_text": {"type": "string"},
									"content_markdown": {"type": "string"},
									"attachment": {
										"type": "string",
										"description": "Must be a `local-media://` reference"
									},
									"sensitive": {"type": "boolean"}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successfully created reply.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["id", "post"],
									"properties": {
										"id": {"type": "integer"}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/posts/{postID}/votes": {
			"get": {
				"summary": "List likers of a post",
				"parameters": [
					{
						"name": "postID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					},
					{
						"name": "page",
						"in": "query",
						"required": true,
						"schema": {"type": "string"}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["items", "next_page"],
									"properties": {
										"items": {
											"type": "array",
											"items": {
												"type": "object",
												"required": ["user"],
												"properties": {
													"user": {"$ref": "#/components/schemas/MinimalUserInfo"}
												}
											}
										},
										"next_page": {
											"type": "string",
											"nullable": true
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/posts/{postID}/your_vote": {
			"put": {
				"summary": "Like a post",
				"parameters": [
					{
						"name": "postID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"responses": {
					"204": {
						"description": "Successfully liked."
					}
				},
				"security": [{"bearer": []}]
			},
			"delete": {
				"summary": "Retract a like of a post",
				"parameters": [
					{
						"name": "postID",
						"in": "path",
						"required": true,
						"schema": {"type": "integer"}
					}
				],
				"responses": {
					"204": {
						"description": "Successfully unliked."
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/users": {
			"get": {
				"summary": "Find a local user by username",
				"parameters": [
					{
						"name": "local",
						"in": "query",
						"required": true,
						"schema": {"type": "boolean"},
						"description": "Filter by whether the user is local. Currently required to be true."
					},
					{
						"name": "username",
						"in": "query",
						"required": true,
						"schema": {"type": "string"},
						"description": "Filter by the user's name"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["items", "next_page"],
									"properties": {
										"items": {
											"type": "array",
											"items": {"$ref": "#/components/schemas/UserInfo"}
										},
										"next_page": {"type": "string", "nullable": true}
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Register a new account",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["username", "password"],
								"properties": {
									"username": {"type": "string"},
									"password": {"type": "string"},
									"email_address": {"type": "string", "format": "email"},
									"invitation_key": {"type": "string"},
									"login": {
										"type": "boolean",
										"description": "If true, will also create a login token for the new user"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["user"],
									"properties": {
										"user": {
											"$ref": "#/components/schemas/LoginUserInfo"
										},
										"permissions": {
											"$ref": "#/components/schemas/LoginInfo/properties/permissions"
										},
										"token": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/users/{userID}": {
			"get": {
				"summary": "Fetch information about a user",
				"parameters": [
					{
						"name": "userID",
						"in": "path",
						"required": true,
						"schema": {"$ref": "#/components/schemas/PathUserID"}
					},
					{
						"name": "include_your",
						"in": "query",
						"required": false,
						"schema": {"type": "boolean"},
						"description": "If true, will fetch your_note"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserInfo"
								}
							}
						}
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/users/{userID}/things": {
			"get": {
				"summary": "List content posted by a user",
				"parameters": [
					{
						"name": "userID",
						"in": "path",
						"required": true,
						"schema": {"$ref": "#/components/schemas/PathUserID"}
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {"type": "integer"}
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"schema": {"type": "string"}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["items", "next_page"],
									"properties": {
										"items": {
											"type": "array",
											"items": {
												"oneOf": [
													{
														"type": "object",
														"required": ["type", "id", "content_text", "content_html", "created", "post", "sensitive"],
														"properties": {
															"type": {"type": "string", "enum": ["comment"]},
															"id": {"type": "integer"},
															"content_text": {"type": "string", "nullable": true},
															"content_html": {"type": "string", "nullable": true},
															"sensitive": {"type": "boolean"},
															"created": {"type": "string", "format": "date-time"},
															"post": {"$ref": "#/components/schemas/MinimalPostInfo"}
														}
													},
													{"$ref": "#/components/schemas/SomePostInfo"}
												]
											}
										},
										"next_page": {
											"type": "string",
											"nullable": true
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/unstable/users/{userID}/your_note": {
			"put": {
				"summary": "Edit your personal note for a user",
				"parameters": [
					{
						"name": "userID",
						"in": "path",
						"required": true,
						"schema": {"$ref": "#/components/schemas/PathUserID"}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["content_text"],
								"properties": {
									"content_text": {"type": "string"}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "Successfully set."
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/users/~me": {
			"patch": {
				"summary": "Edit your account settings",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"description_text": {"type": "string"},
									"description_markdown": {"type": "string"},
									"description_html": {"type": "string"},
									"email_address": {"type": "string", "format": "email"},
									"password": {"type": "string", "format": "password"},
									"avatar": {"type": "string", "description": "User profile image. Must be a `local-media://` link"}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "Successfully modified."
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/users/~me/notifications": {
			"get": {
				"summary": "Fetch your notifications. Will also clear `has_unread_notifications`.",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["items", "next_page"],
									"properties": {
										"items": {
											"type": "array",
											"items": {
												"allOf": [
													{
														"type": "object",
														"required": ["unseen"],
														"properties": {
															"unseen": {
																"type": "boolean",
																"description": "Whether this notification was generated since the last time notifications were checked."
															}
														}
													},
													{
														"oneOf": [
															{
																"type": "object",
																"required": ["type", "reply", "post"],
																"properties": {
																	"type": {"type": "string", "enum": ["post_reply"]},
																	"reply": {"$ref": "#/components/schemas/PostCommentInfo"},
																	"post": {"$ref": "#/components/schemas/PostListPost"}
																}
															},
															{
																"type": "object",
																"required": ["type", "reply", "post", "comment"],
																"properties": {
																	"type": {"type": "string", "enum": ["comment_reply"]},
																	"reply": {"$ref": "#/components/schemas/PostCommentInfo"},
																	"comment": {"$ref": "#/components/schemas/PostCommentInfo"},
																	"post": {"$ref": "#/components/schemas/PostListPost"}
																}
															}
														]
													}
												]
											}
										},
										"next_page": {
											"type": "string",
											"nullable": true
										}
									}
								}
							}
						}
					}
				},
				"security": [{"bearer": []}]
			}
		},
		"/api/unstable/users/~me/notifications:subscriptions": {
			"post": {
				"summary": "Create a notifications subscription",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["type", "endpoint", "p256dh_key", "auth_key"],
								"properties": {
									"type": {
										"type": "string",
										"enum": ["web_push"]
									},
									"endpoint": {
										"type": "string"
									},
									"p256dh_key": {
										"type": "string"
									},
									"auth_key": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successfully registered subscription",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["id"],
									"properties": {
										"id": {
											"type": "integer"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
